1. types 
     eg:- string, bool, int, uint, address

2. functions:- 
     1. constructor function
     eg:- pure, view, public, external

3. visiblity:-
     eg:- private, internal, public, no visiblity (eg:- string name = "ram") 

4. modifiers:-
     - you can create your own modifiers by 
          modifier onlyOwner {
               require(msg.sender == owner,'caller must be owner I);
               _;
          }
          function getsender() public view modifier {
               name = _name;
          }
     eg:- public, view, pure, payable

5. global variables:- 
     this, msg, tx, block

6. operators:- 
     solidity also supports ternary operator 

7. arrays:- 
     ->   uint[] public array1 = [1, 2, 3];
          uint[] public array2;
          uint [10] public array3;
          string[] publÃ…c array4 =  ["tell "banana", "carrot"] ;
          string[] public array5;
          string [10] public array6;
     
     -> you have all the operations like push pop and delete arr[index]

8. mapping:- 
     -> it is a key value pair like objects 
          mapping(uint=> string) public name;

9. structures:- 

10. events:- 
     event MessageUpdated(
          address indexed user,         /// these can be of any data type and must me max of 17 in number 
          string _ message
     )
     function updateMessage(string memory _ message) public {
          message = _message;
          emitl MessageUpdated(msg.sender, _message) ;
     }

     (indexed) this keyword can be given to max of 3 variables 

11. ether:-
     1. ether is divided into 18 decimle places 
     2. recieve() external payable {} used to recieve ether to smartcontract 
     3. fallback() functions

12. Error handling:- 
     1. require() function which returns true or false acording to condition
     2. revert() reverts and error 

13. inheritence:- 
         
14. CallData:- calldata in a contiguous block of memory which stores any data contained in the calldata was given as input by an address 
               to perform an external call.
          1. due to above reason internal functions argument are not stored in calldata rather it is stored in memory or storage


15. payable:- keyword that is used to indicate that a function or contract can receive and send ether.

16. recieve():- receive Ether payments in a contract, like constructor automatically called when a contract receives Ether without a function 
                call or when a contract is the recipient of a selfdestruct call

                1. no arguments and no return 
                2. only be called once per transaction
                3. Ether sent to the contract without calling a specific function will trigger the receive() function
                4. allows to recieve ethers withought calling the function
                5. always it is external

17. msg:- 
          1. msg.sender:- returns the public key of the Ethereum account that initiated the transaction
          2. msg.value:- returns the total wei of the Ethereum account that initiated the transaction to pay and function should be payable
          3. msg.data:- it returns the calldata of the transaction which contains function selector and any arguments passed to the function
                         usecase:- we can use it to extract arguments from the data and etc.. 
          4. msg.sig:- it is same as msg.data but returns the first four bytes of the calldata of the transaction 
                         usecase:- used to determine which function is called if two or more function of same name is called 
          5. gasleft():- gives the remaning gas for the transaction  
          6. tx.gasprice:- gives the gasprice for the transaction  

18. Block:-
     1. block.number:- returns block number
     2. block.timestamp:- returns the unix timestamp of current block
     3. block.difficulty:- return difficulty of current block to mine
     4. block.gaslimit:- returns maximum gas that can be used for a transaction in current block;
     5. block.coinbase:- returns address of the miner who mined the current block (return type is address)
     6. blockhash(blocknumber):- 
     7. block.basefees:- returns base fee of the current block








